{"version":3,"file":"main.js","mappings":";;;;;AAAO;AACP;AACA,SAAS;;AAET;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA,aAAa;AACb,CAAC;;AAEM;AACP;AACA;;;ACnCO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,SAAS;AACT,SAAS;AACT;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;;AAEO;AACP,SAAS;AACT,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;;ACxNwC;AACH;;AAErC;AACO;;AAEA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa;AACb,CAAC;;AAED;AACA;AACA,QAAQ,MAAM;AACd;AACA;AACA,QAAQ,MAAM;AACd;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,YAAY,wBAAwB,EAAE,MAAM;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,MAAM;;AAEN,IAAI,MAAM,SAAS,CAAC;;AAEpB;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,MAAM;;AAE9B;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,6BAA6B,MAAM;AACnC;AACA;AACA,cAAc;AACd,mDAAmD,MAAM;AACzD;AACA,UAAU;AACV,+CAA+C,MAAM;AACrD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEO;AACP;AACA;AACA,IAAI,MAAM;AACV,IAAI,KAAK;AACT,IAAI,MAAM,SAAS,CAAC;AACpB;;AAEO;AACP,WAAW,MAAM;AACjB;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA;;AAEO;AACP,IAAI,MAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,MAAM;;AAE5B;AACA;AACA,0BAA0B,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEO;AACP;AACA,yBAAyB,MAAM;AAC/B,2BAA2B,MAAM;AACjC,yBAAyB,MAAM;AAC/B;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;;AAEA;;;ACvLA;AACA;AACA;;AAEO;AACP,aAAa;AACb;;AAEO;AACP;AACA,YAAY,aAAa;;AAEzB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;;AChCqC;AAOV;AACwB;;AAEnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS,UAAU,0BAA0B;;AAEnE,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB,oCAAoC,MAAM,EAAE,WAAW,EAAE,MAAM;AAC/D,2BAA2B,cAAc;AACzC,aAAa;AACb;AACA;;AAEA,6BAA6B,WAAW;AACxC;;AAEA;AACA;;AAEA,wBAAwB,SAAS,UAAU,4BAA4B;;AAEvE,oBAAoB,SAAS;AAC7B;AACA;AACA,YAAY,SAAS;AACrB,oCAAoC,aAAa;AACjD,2BAA2B,gBAAgB;AAC3C,aAAa;AACb;AACA;;AAEA,6BAA6B,WAAW;AACxC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,EAAE,YAAY;;AAEpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,SAAS;AACb;AACA;AACA;AACA;;AAEA;AACA,QAAQ,gBAAgB;AACxB;AACA;AACA;AACA,CAAC;;AAED;AACA,IAAI,gBAAgB;AACpB,IAAI,gBAAgB;AACpB;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA,CAAC;;AAED,MAAM,WAAW,CAAC;;AAElB;;;AC3J6B;AACA","sources":["webpack://marlatte-battleship/./src/scripts/pubsub.js","webpack://marlatte-battleship/./src/scripts/board.js","webpack://marlatte-battleship/./src/scripts/game-controller.js","webpack://marlatte-battleship/./src/scripts/helpers.js","webpack://marlatte-battleship/./src/scripts/screen-controller.js","webpack://marlatte-battleship/./src/scripts/index.js"],"sourcesContent":["export const PubSub = (() => {\n    const eventsList = {};\n    // { key: \"triggerEvent\", value: [ array of functions ] }\n\n    function subscribe(triggerEvent, subscriber) {\n        if (!eventsList[triggerEvent]) {\n            eventsList[triggerEvent] = [subscriber];\n        } else {\n            eventsList[triggerEvent].push(subscriber);\n        }\n        return {\n            unsubscribe: () => {\n                const functionList = eventsList[triggerEvent];\n                const i = functionList.indexOf(subscriber);\n                if (i > -1) {\n                    functionList.splice(i, 1);\n                }\n            },\n        };\n    }\n\n    function publish(triggerEvent, ...args) {\n        const functionList = eventsList[triggerEvent];\n        if (Array.isArray(functionList)) {\n            functionList.forEach((subscriber) => {\n                subscriber(...args);\n            });\n        }\n    }\n\n    return { subscribe, publish };\n})();\n\nexport const E = {\n    UPDATE: 'UpdateDisplay',\n};\n","export function ShipFactory(id, length) {\n    let health = length;\n    const hit = () => {\n        health -= 1;\n    };\n\n    const getHealth = () => health;\n\n    let vertical = false;\n    const changeVertical = () => {\n        vertical = !vertical;\n    };\n    const isVertical = () => vertical;\n\n    const isAfloat = () => health >= 1;\n    return {\n        getID: () => id,\n        length,\n        getHealth,\n        hit,\n        isAfloat,\n        changeVertical,\n        isVertical,\n    };\n}\n\nexport const Square = () => {\n    let attacked = 0;\n    const wasAttacked = () => attacked;\n\n    let ship = null;\n    const isTaken = () => !!ship;\n    const addShip = (newShip) => {\n        ship = newShip;\n    };\n\n    const attack = () => {\n        if (ship) {\n            attacked = 2;\n            ship.hit();\n            const sunk = !ship.isAfloat();\n            return { hit: true, sunk };\n        }\n        attacked = 1;\n        return false;\n    };\n\n    const checkShipAfloat = () => ship?.isAfloat();\n\n    const getShipId = () => ship?.getID();\n\n    return {\n        wasAttacked,\n        isTaken,\n        addShip,\n        attack,\n        checkShipAfloat,\n        getShipId,\n    };\n};\n\nexport const BoardFactory = () => {\n    const grid = [];\n    for (let i = 0; i < 100; i += 1) {\n        grid.push(Square());\n    }\n    const getGrid = () => [...grid];\n    const getGridAttacks = () => grid.map((square) => square.wasAttacked());\n    const getGridShips = () => grid.map((square) => +square.isTaken());\n    const getGridIllegal = () =>\n        grid.map((square, i) => {\n            const testBase = [0, 10, -10];\n            if (!(i % 10)) testBase.push(-9, 1, 11);\n            else if (!((i + 1) % 10)) testBase.push(-11, -1, 9);\n            else testBase.push(-9, 1, 11, -11, -1, 9);\n            const adjacent = testBase\n                .map((num) => grid[i + num]?.isTaken())\n                .filter(Boolean).length;\n            return +!!adjacent;\n        });\n\n    const shipsAfloat = new Set();\n    const updateShipsAfloat = () => {\n        shipsAfloat.clear();\n        const ships = grid.filter((sq) => sq.checkShipAfloat());\n        ships.forEach((item) => {\n            shipsAfloat.add(item.getShipId());\n        });\n    };\n    const getShipsAfloat = () => [...shipsAfloat];\n\n    const placeShip = (ship, start) => {\n        const spots = [];\n        const { length, isVertical } = ship;\n        const multiplier = isVertical() ? 10 : 1;\n        const end = start + multiplier * length;\n        for (let i = start; i < end; i += multiplier) {\n            const vertBool = i >= 100;\n            const horizBool = !(i % 10) || vertBool;\n            if (\n                (isVertical() ? vertBool : horizBool && i !== start) ||\n                getGridIllegal()[i]\n            ) {\n                return false;\n            }\n            spots.push(i);\n        }\n        spots.forEach((i) => {\n            grid[i].addShip(ship);\n        });\n        updateShipsAfloat();\n        return true;\n    };\n\n    const findShip = (id) => {\n        const coords = [];\n        grid.forEach((square, index) => {\n            if (square.getShipId() === id) {\n                coords.push(index);\n            }\n        });\n        return coords;\n    };\n\n    const findAdjacent = (sunkCoords, noDiagonals = false) => {\n        const freeAttacks = new Set();\n        sunkCoords.forEach((spot) => {\n            const testBase = [10, -10];\n            if (!(spot % 10)) testBase.push(-9, 1, 11);\n            else if (!((spot + 1) % 10)) testBase.push(-11, -1, 9);\n            else testBase.push(-9, 1, 11, -11, -1, 9);\n\n            if (noDiagonals) {\n                [9, -9, 11, -11].forEach((num) => {\n                    if (testBase.includes(num)) {\n                        const i = testBase.indexOf(num);\n                        testBase.splice(i, 1);\n                    }\n                });\n            }\n\n            testBase.forEach((num) => {\n                const coord = spot + num;\n                if (grid[coord]?.wasAttacked() === 0) {\n                    freeAttacks.add(coord);\n                }\n            });\n        });\n        return [...freeAttacks].sort((a, b) => a - b);\n    };\n\n    const receiveAttack = (coord) => {\n        const result = grid[coord].attack();\n        if (result.sunk) {\n            result.sunkCoords = findShip(grid[coord].getShipId());\n            findAdjacent(result.sunkCoords).forEach((freeAttack) => {\n                grid[freeAttack].attack();\n            });\n        }\n        updateShipsAfloat();\n        return result;\n    };\n\n    return {\n        getGrid,\n        getGridAttacks,\n        getGridShips,\n        getGridIllegal,\n        placeShip,\n        getShipsAfloat,\n        findAdjacent,\n        receiveAttack,\n    };\n};\n\nexport const boards = {\n    p: {},\n    c: {},\n    reset: (target = false) => {\n        if (target) {\n            boards[target] = BoardFactory();\n        } else {\n            boards.p = BoardFactory();\n            boards.c = BoardFactory();\n        }\n    },\n};\n\nexport const ships = {\n    p: {},\n    c: {},\n    reset: () => {\n        [\n            ['carrier', 5],\n            ['battleship', 4],\n            ['cruiser', 4],\n            ['destroyer', 3],\n            ['submarine', 3],\n            ['patrol1', 2],\n            ['patrol2', 2],\n        ].forEach(([name, len]) => {\n            ships.p[name] = ShipFactory(name, len);\n            ships.c[name] = ShipFactory(name, len);\n        });\n    },\n};\n\n// function gridify(grid) {\n//     return grid.reduce(\n//         (acc, curr, index) => {\n//             if (!(index % 10) && index > 0) acc.push([]);\n//             acc[acc.length - 1].push(curr);\n//             return acc;\n//         },\n//         [[]]\n//     );\n// }\n","import { boards, ships } from './board';\nimport { E, PubSub } from './pubsub';\n\nlet gameStarted = false;\nexport const checkGameStarted = () => gameStarted;\n\nexport const Player = (() => {\n    const PlayerFactory = () => {\n        const pastHits = new Set();\n        const addHit = (coord) => {\n            pastHits.add(coord);\n        };\n        const removeHit = (coord) => {\n            pastHits.delete(coord);\n        };\n        const getPastHits = () => [...pastHits];\n        const clearHits = () => {\n            pastHits.clear();\n        };\n\n        const getCompSmart = (options) =>\n            options[Math.floor(Math.random() * options.length)];\n\n        const getCompGuess = (grid) => {\n            const options = grid.reduce((acc, curr, index) => {\n                if (curr === 0) {\n                    acc.push(index);\n                }\n                return acc;\n            }, []);\n            return options[Math.floor(Math.random() * options.length)];\n        };\n\n        return {\n            addHit,\n            removeHit,\n            getPastHits,\n            clearHits,\n            getCompSmart,\n            getCompGuess,\n        };\n    };\n    const p = PlayerFactory();\n    const c = PlayerFactory();\n\n    let human = true;\n    const toggle = () => {\n        human = !human;\n    };\n\n    const reset = () => {\n        human = true;\n        p.clearHits();\n    };\n\n    return { p, c, toggle, reset, isHumanTurn: () => human };\n})();\n\nfunction checkGameOver() {\n    let winner = '';\n    if (boards.p.getShipsAfloat().length < 1) {\n        winner = 'Computer';\n    }\n    if (boards.c.getShipsAfloat().length < 1) {\n        winner = 'Player';\n    }\n    return winner;\n}\n\nexport function playRound(coord) {\n    const current = !Player.isHumanTurn() ? 'c' : 'p';\n    const opponent = Player.isHumanTurn() ? 'c' : 'p';\n    const { hit, sunk, sunkCoords } = boards[opponent].receiveAttack(coord);\n    const gameOver = checkGameOver();\n\n    if (hit) {\n        Player[current].addHit(coord);\n        if (sunk) {\n            sunkCoords.forEach((sunkCoord) => {\n                Player.c.removeHit(sunkCoord);\n            });\n        }\n    } else Player.toggle();\n\n    PubSub.publish(E.UPDATE);\n\n    if (gameOver) return gameOver;\n\n    if (!Player.isHumanTurn()) {\n        let compChoice;\n        const pastHits = Player.c.getPastHits();\n        const lastHit = pastHits[pastHits.length - 1];\n        const options = boards.p.findAdjacent([lastHit], true);\n\n        if (options.length) {\n            compChoice = Player.c.getCompSmart(options);\n        } else if (pastHits.length > 1) {\n            Player.c.removeHit(lastHit);\n            const pastHits2 = Player.c.getPastHits();\n            const lastHit2 = pastHits2[0];\n            const options2 = boards.p.findAdjacent([lastHit2], true);\n            if (options2.length) {\n                compChoice = Player.c.getCompSmart(options2);\n            } else {\n                compChoice = Player.c.getCompGuess(boards.p.getGridAttacks());\n            }\n        } else {\n            compChoice = Player.c.getCompGuess(boards.p.getGridAttacks());\n        }\n        setTimeout(() => {\n            playRound(compChoice);\n        }, 400);\n    }\n    return false;\n}\n\nexport function resetGame() {\n    gameStarted = false;\n    Player.reset();\n    boards.reset();\n    ships.reset();\n    PubSub.publish(E.UPDATE);\n}\n\nexport function getOpenIndices(player) {\n    return boards[player]\n        .getGridIllegal()\n        .map((val, index) => ({ val, index }))\n        .filter((item) => item.val === 0)\n        .map((item) => item.index);\n}\n\nexport function placeRandomShips(player) {\n    boards.reset(player);\n    gameStarted = true;\n    const failedSpots = [];\n    const shipNames = [\n        'carrier',\n        'battleship',\n        'cruiser',\n        'destroyer',\n        'submarine',\n        'patrol1',\n        'patrol2',\n    ];\n    shipNames.forEach((name) => {\n        const ship = ships[player][name];\n        let success = false;\n        while (failedSpots.length < 88 && !success) {\n            const openIndices = getOpenIndices(player);\n            const spot =\n                openIndices[\n                    Math.floor(Math.random() * (openIndices.length - 1))\n                ];\n\n            if (Math.floor(Math.random() + 0.5)) {\n                ship.changeVertical();\n            }\n\n            success = boards[player].placeShip(ship, spot);\n\n            if (!success) {\n                ship.changeVertical();\n                success = boards[player].placeShip(ship, spot);\n                if (!success) {\n                    failedSpots.push(spot);\n                }\n            }\n        }\n    });\n}\n\nexport function getGameState() {\n    return {\n        playerShipsGrid: boards.p.getGridShips(),\n        playerAttacksGrid: boards.p.getGridAttacks(),\n        compAttacksGrid: boards.c.getGridAttacks(),\n        isHuman: Player.isHumanTurn(),\n        pScore: boards.p.getShipsAfloat().length,\n        cScore: boards.c.getShipsAfloat().length,\n    };\n}\n\nresetGame();\n","// ------------------------------------------------------- //\n// -------------------- DOM Factories -------------------- //\n// ------------------------------------------------------- //\n\nexport function elFactory(type, attributes, children = []) {\n    return { type, attributes, children };\n}\n\nexport function htmlFactory(obj) {\n    const el = document.createElement(obj.type);\n    const { attributes } = obj;\n\n    Object.entries(attributes).forEach(([key, value]) => {\n        if (key !== 'dataset') {\n            el[key] = value;\n        } else {\n            // Special directions needed to set \"data-\" properties\n            Object.entries(value).forEach(([prop, data]) => {\n                el.dataset[prop] = data;\n            });\n        }\n    });\n\n    obj.children?.forEach((child) => {\n        // Allows for conditionally adding children upstream by\n        // setting \"\" as the alternative to elFactory()\n        if (child) {\n            el.appendChild(htmlFactory(child));\n        }\n    });\n\n    return el;\n}\n","import { E, PubSub } from './pubsub';\nimport {\n    checkGameStarted,\n    getGameState,\n    placeRandomShips,\n    playRound,\n    resetGame,\n} from './game-controller';\nimport { elFactory, htmlFactory } from './helpers';\n\n// Pre-game Vars\nconst homeScreen = document.querySelector('.home-screen');\nconst preGameBoard = document.querySelector('.pre-game-board');\nconst randomBoardBtn = document.querySelector('#random-board-btn');\nconst startBtn = document.querySelector('#start-btn');\n\n// In-game Vars\nconst homeBtn = document.querySelector('#home-btn');\nconst currentTurnText = document.querySelector('#current');\nconst shipsBoard = document.querySelector('.game-boards .ships');\nconst attacksBoard = document.querySelector('.game-boards .attacks');\nconst pScoreDisplay = document.querySelector('#player-score');\nconst cScoreDisplay = document.querySelector('#computer-score');\n\n// Post-game Vars\nconst winnerDisplay = document.querySelector('#winner');\nconst endScreen = document.querySelector('.end-screen');\nconst endPopUp = endScreen.querySelector('.pop-up');\nconst newGameBtn = document.querySelector('#new-game-btn');\n\nfunction endGameDisplay(winner) {\n    winnerDisplay.textContent = winner;\n    endScreen.classList.remove('hidden');\n    setTimeout(() => {\n        endPopUp.classList.remove('shrunk');\n    }, 150);\n}\n\nfunction handleBoardClick(e) {\n    const coord = e.target.dataset.attackCoord;\n    if (!coord || e.target.classList.value !== 'square') return;\n    document\n        .querySelector('.board.attacks')\n        .removeEventListener('click', handleBoardClick);\n    const gameOver = playRound(coord);\n    if (gameOver) {\n        endGameDisplay(gameOver);\n    }\n}\n\nfunction updateCurrentPlayer(isHuman = true) {\n    if (isHuman) {\n        currentTurnText.textContent = 'Player';\n        document\n            .querySelector('.board.attacks')\n            .addEventListener('click', handleBoardClick);\n    } else {\n        currentTurnText.textContent = 'Computer';\n    }\n}\n\nfunction updateShipsBoard(\n    isPlacementPhase = false,\n    playerShipsGrid = [],\n    playerAttacksGrid = []\n) {\n    const appendTarget = isPlacementPhase ? preGameBoard : shipsBoard;\n    appendTarget.textContent = '';\n    const shipsGrid = elFactory('div', { classList: 'board ships' });\n\n    for (let i = 0; i < 100; i += 1) {\n        const taken = playerShipsGrid[i] ? ' ship' : '';\n        const compAttack = ['', ' miss', ' hit'][playerAttacksGrid[i]] ?? '';\n        const place = isPlacementPhase ? ' place' : '';\n        shipsGrid.children.push(\n            elFactory('div', {\n                classList: `square${taken}${compAttack}${place}`,\n                dataset: { shipCoord: i },\n            })\n        );\n    }\n\n    appendTarget.appendChild(htmlFactory(shipsGrid));\n}\n\nfunction updateAttacksBoard(compAttacksGrid = []) {\n    attacksBoard.textContent = '';\n\n    const attacksGrid = elFactory('div', { classList: 'board attacks' });\n\n    for (let i = 0; i < 100; i += 1) {\n        const playerAttack = ['', ' miss', ' hit'][compAttacksGrid[i]] ?? '';\n        attacksGrid.children.push(\n            elFactory('button', {\n                classList: `square${playerAttack}`,\n                dataset: { attackCoord: i },\n            })\n        );\n    }\n\n    attacksBoard.appendChild(htmlFactory(attacksGrid));\n}\n\nfunction updateScores(pScore, cScore) {\n    pScoreDisplay.textContent = pScore;\n    cScoreDisplay.textContent = cScore;\n}\n\nfunction updateDisplay(isPlacementPhase = false) {\n    // Gets info from game-controller\n    const {\n        playerShipsGrid,\n        playerAttacksGrid,\n        compAttacksGrid,\n        isHuman,\n        pScore,\n        cScore,\n    } = getGameState();\n\n    // Updates boards, current player, and scores\n    updateShipsBoard(isPlacementPhase, playerShipsGrid, playerAttacksGrid);\n    updateAttacksBoard(compAttacksGrid);\n    updateCurrentPlayer(isHuman);\n    updateScores(pScore, cScore);\n}\n\nfunction startApp() {\n    resetGame();\n    endScreen.classList.add('hidden');\n    homeScreen.classList.remove('hidden');\n    updateDisplay(true);\n}\n\nstartBtn.addEventListener('click', () => {\n    if (checkGameStarted()) {\n        updateDisplay();\n        homeScreen.classList.add('hidden');\n    }\n});\n\nrandomBoardBtn.addEventListener('click', () => {\n    placeRandomShips('p');\n    placeRandomShips('c');\n    updateDisplay(true);\n});\n\nhomeBtn.addEventListener('click', startApp);\n\nnewGameBtn.addEventListener('click', () => {\n    startApp();\n    updateDisplay();\n});\n\nPubSub.subscribe(E.UPDATE, updateDisplay);\n\nstartApp();\n","import './screen-controller';\nimport '../styles/style.css';\n"],"names":[],"sourceRoot":""}